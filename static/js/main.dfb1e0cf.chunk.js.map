{"version":3,"sources":["components/CountryLister.tsx","components/AllCountries.tsx","components/Continents.tsx","components/Countries.tsx","components/Lister.tsx","components/Country.tsx","components/Home.tsx","components/Languages.tsx","components/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CountryLister","list","map","code","name","to","ListGroup","Item","action","ALLCOUNTRIES","gql","AllCountries","useQuery","loading","error","data","countries","CONTINENTS","Continents","continents","COUNTRIES","Countries","continentCode","useParams","variables","continentCodes","Lister","COUNTRY","Country","countryCode","country","native","phone","continent","capital","currency","languages","className","Home","LANGUAGES","Languages","Main","path","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfb1e0cf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { listItem } from \"./Lister\";\r\n\r\ninterface Props {\r\n  list: listItem[];\r\n}\r\n\r\nexport const CountryLister: React.FC<Props> = ({ list }) => {\r\n  return (\r\n    <>\r\n      {list.map(({ code, name }) => (\r\n        <Link to={`/country/${code}`}>\r\n          <ListGroup.Item key={code} action>\r\n            {name}\r\n          </ListGroup.Item>\r\n        </Link>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { gql, useQuery } from \"@apollo/client\";\r\n\r\nimport { CountryLister } from \"./CountryLister\";\r\nimport { listItem } from \"./Lister\";\r\n\r\nconst ALLCOUNTRIES = gql`\r\n  {\r\n    countries {\r\n      code\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\ninterface data {\r\n  countries: listItem[];\r\n}\r\n\r\nexport const AllCountries: React.FC = () => {\r\n  const { loading, error, data } = useQuery<data>(ALLCOUNTRIES);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n  if (!data) return <p>No data.</p>;\r\n\r\n  const { countries } = data;\r\n\r\n  return (\r\n    <>\r\n      <h1>All Countries Page</h1>\r\n      <CountryLister list={countries} />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { listItem } from \"./Lister\";\r\n\r\nconst CONTINENTS = gql`\r\n  {\r\n    continents {\r\n      code\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport interface data {\r\n  continents: listItem[];\r\n}\r\n\r\nexport const Continents: React.FC = () => {\r\n  const { loading, error, data } = useQuery<data>(CONTINENTS);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n  if (!data) return <p>No data.</p>;\r\n\r\n  const { continents } = data;\r\n\r\n  return (\r\n    <>\r\n      <h1>Continents Page</h1>\r\n      <ListGroup>\r\n        {continents.map(({ code, name }) => (\r\n          <Link to={`/countries/${code}`}>\r\n            <ListGroup.Item key={code} action>\r\n              {name}\r\n            </ListGroup.Item>\r\n          </Link>\r\n        ))}\r\n      </ListGroup>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { gql, useQuery } from \"@apollo/client\";\r\n\r\nimport { listItem } from \"./Lister\";\r\nimport { CountryLister } from \"./CountryLister\";\r\n\r\nconst COUNTRIES = gql`\r\n  query($continentCodes: [String!]!) {\r\n    countries(filter: { continent: { in: $continentCodes } }) {\r\n      code\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\ninterface data {\r\n  countries: listItem[];\r\n}\r\n\r\nexport const Countries: React.FC = () => {\r\n  const { continentCode } = useParams<{ continentCode: string }>();\r\n\r\n  const { loading, error, data } = useQuery<data>(COUNTRIES, {\r\n    variables: { continentCodes: [continentCode] },\r\n  });\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n  if (!data) return <p>No data.</p>;\r\n\r\n  const { countries } = data;\r\n\r\n  return (\r\n    <>\r\n      <h1>Countries in {continentCode} Page</h1>\r\n      <CountryLister list={countries} />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nexport interface listItem {\r\n  code: string;\r\n  name: string;\r\n}\r\n\r\ninterface Props {\r\n  list: listItem[];\r\n}\r\n\r\nexport const Lister: React.FC<Props> = ({ list }) => {\r\n  return (\r\n    <>\r\n      {list.map(({ code, name }) => (\r\n        <ListGroup.Item key={code}>{name}</ListGroup.Item>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\n\r\nimport { Lister, listItem } from \"./Lister\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst COUNTRY = gql`\r\n  query($countryCode: ID!) {\r\n    country(code: $countryCode) {\r\n      name\r\n      native\r\n      phone\r\n      continent {\r\n        name\r\n      }\r\n      capital\r\n      currency\r\n      languages {\r\n        code\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\ninterface country {\r\n  name: string;\r\n  native: string;\r\n  phone: string;\r\n  continent: {\r\n    name: string;\r\n  };\r\n  capital: string;\r\n  currency: string;\r\n  languages: listItem[];\r\n}\r\n\r\ninterface data {\r\n  country: country;\r\n}\r\n\r\nexport const Country: React.FC = () => {\r\n  const { countryCode } = useParams<{ countryCode: string }>();\r\n\r\n  const { loading, error, data } = useQuery<data>(COUNTRY, {\r\n    variables: { countryCode: countryCode },\r\n  });\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n  if (!data) return <p>No data.</p>;\r\n\r\n  const { country } = data;\r\n\r\n  const {\r\n    name,\r\n    native,\r\n    phone,\r\n    continent,\r\n    capital,\r\n    currency,\r\n    languages,\r\n  } = country;\r\n\r\n  return (\r\n    <>\r\n      <h1>{name} Page</h1>\r\n      <h2>Native: {native}</h2>\r\n      <p>Phone: {phone}</p>\r\n      <p>Continent: {continent.name}</p>\r\n      <p>Capital: {capital}</p>\r\n      <p>Currency: {currency}</p>\r\n      <div className=\"Languages\">\r\n        <h3>Languages:</h3>\r\n        <Lister list={languages} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const Home: React.FC = () => {\r\n  return (\r\n    <>\r\n      <h1>Home Page</h1>\r\n      <ListGroup>\r\n        <Link to=\"/continents\">\r\n          <ListGroup.Item action>Continents</ListGroup.Item>\r\n        </Link>\r\n        <Link to=\"/countries\">\r\n          <ListGroup.Item action>Countries</ListGroup.Item>\r\n        </Link>\r\n        <Link to=\"/languages\">\r\n          <ListGroup.Item action>Languages</ListGroup.Item>\r\n        </Link>\r\n      </ListGroup>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\n\r\nimport { Lister, listItem } from \"./Lister\";\r\n\r\nconst LANGUAGES = gql`\r\n  {\r\n    languages {\r\n      code\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\ninterface data {\r\n  languages: listItem[];\r\n}\r\n\r\nexport const Languages: React.FC = () => {\r\n  const { loading, error, data } = useQuery<data>(LANGUAGES);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n  if (!data) return <p>No data.</p>;\r\n\r\n  const { languages } = data;\r\n\r\n  return (\r\n    <>\r\n      <h1>Languages Page</h1>\r\n      <Lister list={languages} />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport { AllCountries } from \"./AllCountries\";\r\nimport { Continents } from \"./Continents\";\r\nimport { Countries } from \"./Countries\";\r\nimport { Country } from \"./Country\";\r\nimport { Home } from \"./Home\";\r\nimport { Languages } from \"./Languages\";\r\n\r\nexport const Main = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/languages\">\r\n          <Languages />\r\n        </Route>\r\n        <Route path=\"/country/:countryCode\">\r\n          <Country />\r\n        </Route>\r\n        <Route path=\"/countries/:continentCode\">\r\n          <Countries />\r\n        </Route>\r\n        <Route path=\"/countries\">\r\n          <AllCountries />\r\n        </Route>\r\n        <Route path=\"/continents\">\r\n          <Continents />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Home />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nimport { Main } from \"./components/Main\";\n\nexport const App: React.FC = () => {\n  return (\n    <Container>\n      <Main />\n    </Container>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\n\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst client = new ApolloClient({\n  uri: \"https://countries.trevorblades.com\",\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}